generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  EMPLOYEE
  CUSTOMER
}

model User {
  id       String  @id @default(uuid())
  name     String
  username String  @unique
  password String
  email    String?
  phone    String?
  address  String?
  city     String?
  state    String?

  role UserRole @default(EMPLOYEE)

  saleAsEmployee Sale[] @relation("EmployeeSales")
  saleAsCustomer Sale[] @relation("CustomerSales")

  @@map("users")
}

model Servant {
  id             String @id @default(uuid())
  name           String
  price          Float
  profitPercent  Float
  workForcePrice Float

  products ServantProducts[]
  sales    SaleServants[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("servants")
}

model ServantProducts {
  servantId String @map("servant_id")
  productId String @map("product_id")

  servant Servant @relation(fields: [servantId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([servantId, productId])
  @@map("servant_products")
}

model Product {
  id         String  @id @default(uuid())
  name       String
  price      Float
  reference  String
  supplierId String? @map("supplier_id")
  stock      Int     @default(1)

  attachments Attachment[]
  servants    ServantProducts[]

  supplier Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Supplier {
  id       String    @id @default(uuid())
  name     String
  email    String
  phone    String
  city     String
  state    String
  address  String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id          String  @id @default(uuid())
  description String?
  amount      Float

  servants    SaleServants[]
  paymentDate DateTime?      @map("payment_date")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  employeeId String?
  customerId String?

  employee User? @relation("EmployeeSales", fields: [employeeId], references: [id])

  customer User? @relation("CustomerSales", fields: [customerId], references: [id])

  @@map("sales")
}

model SaleServants {
  saleId    String @map("sale_id")
  servantId String @map("servant_id")

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  servant Servant @relation(fields: [servantId], references: [id], onDelete: Cascade)

  @@id([saleId, servantId])
  @@map("sale_servants")
}

model Attachment {
  id        String   @id @default(uuid())
  title     String
  url       String
  productId String?  @map("product_id")
  product   Product? @relation(fields: [productId], references: [id])

  @@map("attachments")
}
